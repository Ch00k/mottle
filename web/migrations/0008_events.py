# Generated by Django 5.0.9 on 2024-10-07 20:52

import uuid

import dirtyfields.dirtyfields
import django.contrib.gis.db.models.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("web", "0007_spotifyauth_token_scope"),
    ]

    operations = [
        migrations.AddField(
            model_name="spotifyuser",
            name="location",
            field=django.contrib.gis.db.models.fields.PointField(null=True, srid=4326),
        ),
        migrations.CreateModel(
            name="EventArtist",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("musicbrainz_id", models.UUIDField(null=True)),
                ("songkick_url", models.CharField(max_length=2000, null=True)),
                ("bandsintown_url", models.CharField(max_length=2000, null=True)),
                ("songkick_name_match_accuracy", models.IntegerField()),
                ("bandsintown_name_match_accuracy", models.IntegerField()),
                (
                    "artist",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, related_name="event_artist", to="web.artist"
                    ),
                ),
                ("watching_users", models.ManyToManyField(related_name="watched_event_artists", to="web.spotifyuser")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "source",
                    models.CharField(choices=[("songkick", "songkick"), ("bandsintown", "bandsintown")], max_length=50),
                ),
                ("source_url", models.CharField(max_length=2000)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("concert", "concert"),
                            ("festival", "festival"),
                            ("live_stream", "live_stream"),
                            ("other", "other"),
                        ],
                        max_length=50,
                    ),
                ),
                ("date", models.DateField()),
                ("venue", models.CharField(max_length=200, null=True)),
                ("postcode", models.CharField(max_length=50, null=True)),
                ("address", models.CharField(max_length=1000, null=True)),
                ("city", models.CharField(max_length=100, null=True)),
                ("country", models.CharField(max_length=100, null=True)),
                ("geolocation", django.contrib.gis.db.models.fields.PointField(null=True, srid=4326)),
                ("stream_urls", models.JSONField(null=True)),
                ("tickets_urls", models.JSONField(null=True)),
                (
                    "artist",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="events", to="web.eventartist"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name="EventUpdate",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("type", models.CharField(choices=[("full", "full"), ("partial", "partial")], max_length=50)),
                ("changes", models.JSONField(null=True)),
                ("is_notified_of", models.BooleanField(default=False)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="updates", to="web.event"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
